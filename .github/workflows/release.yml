name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  actions: read

jobs:
  # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  test:
    name: Run Tests Before Release
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # –ù—É–∂–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Build Project
      run: npm run build
      
    - name: Get Version from Tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=${TAG#v}" >> $GITHUB_OUTPUT
        echo "Release version: $TAG"
        
    - name: Update Package Version
      run: |
        npm version ${{ steps.version.outputs.version }} --no-git-tag-version
        echo "‚úÖ Package version updated to ${{ steps.version.outputs.version }}"
        
    - name: Generate Changelog
      id: changelog
      run: |
        echo "# üöÄ Release ${{ steps.version.outputs.tag }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## üìã Changes in this release:" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### üìù Commits since $LAST_TAG:" >> CHANGELOG.md
          git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG.md
        else
          echo "### üìù All commits:" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## üèóÔ∏è Build Information:" >> CHANGELOG.md
        echo "- **Built on:** $(date)" >> CHANGELOG.md
        echo "- **Node.js version:** $(node --version)" >> CHANGELOG.md
        echo "- **npm version:** $(npm --version)" >> CHANGELOG.md
        echo "- **Git commit:** $(git rev-parse HEAD)" >> CHANGELOG.md
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º changelog
        echo "Generated changelog:"
        cat CHANGELOG.md
        
    - name: Create Build Archive
      run: |
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ —Å–±–æ—Ä–∫–∏
        tar -czf n8n-node-converter-documents-${{ steps.version.outputs.version }}.tar.gz \
          dist/ \
          package.json \
          README.md \
          audit.md
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª—Å—è
        ls -la *.tar.gz
        echo "‚úÖ Build archive created"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: üöÄ Release ${{ steps.version.outputs.tag }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          n8n-node-converter-documents-${{ steps.version.outputs.version }}.tar.gz
          package.json
        
    - name: Release Summary
      run: |
        echo "## üéâ Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag:** ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release URL:** ${{ steps.create_release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Assets uploaded:** 2 files" >> $GITHUB_STEP_SUMMARY

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ
  notify:
    name: Post-Release Notification
    runs-on: ubuntu-latest
    needs: [test, release]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.release.result == 'success'
      run: |
        echo "üéâ Release completed successfully!"
        echo "‚úÖ Tests passed"
        echo "‚úÖ Release created"
        echo "‚úÖ Assets uploaded"
        
    - name: Notify Failure
      if: needs.release.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "‚ùå Release failed!"
        if [ "${{ needs.test.result }}" = "failure" ]; then
          echo "‚ùå Tests failed"
        fi
        if [ "${{ needs.release.result }}" = "failure" ]; then
          echo "‚ùå Release creation failed"
        fi
        exit 1 